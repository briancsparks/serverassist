#!/bin/bash -e

eval "$(cli-shezargs $@)"

#
# Pull a secret down from our s3 bucket, and decrpyt it. It will be
# available in ~/stmp/.
#

usage() {
  echo ''
  echo "Usage: $(basename $0) --project= --area= [[secret - without the '.enc' ending]]"
  echo ''
  exit 0
}

[[ -n $help     ]] && usage

[[ -z $project  ]] && project="serverassist"
[[ -z $area     ]] && area="deploy"

# Make sure we have a secure place to work
[[ -z $pid ]] && export pid="$$"
work_dir="$(${scripts_dir}/make-crypto-working-dir $pid)"

orig_file="$1"

[[ -z $orig_file ]] && usage

secret_file="$(basename $1)"
cd $work_dir

echo "certdir: $(pwd)"

# OK. Finally. Pull it down
aws s3 cp "s3://sa-system-storage/${project}/secrets/${area}/${orig_file}.enc" ./

# Pull down the key, if we do not already have it (and set a flag to remove it)
if ! [[ -f ${project}-data-key.json ]]; then
  aws s3 cp "s3://sa-system-storage/${project}/secrets/deploy/${project}-data-key.json" ./
  created_data_key="1"
fi

# Get the plain-text version of the data-key, and store it in the `key` var. Quickly remove the file
cat ${project}-data-key.json | underscore 'select' '.CiphertextBlob' --outfmt=text | base64 -d > binary-blob
key="$(aws kms decrypt --ciphertext-blob fileb://binary-blob | underscore 'select' '.Plaintext' --outfmt=text)"
rm binary-blob

# Decrypt the file
openssl enc -aes-256-cbc -d -a -in "${secret_file}.enc" -out "${secret_file}" -k "$key"

# Clean things up
[[ -n ${created_data_key} ]] && rm $work_dir/${project}-data-key.json
[[ -f ${secret_file}.enc  ]] && rm ${secret_file}.enc

cd $start_dir

